/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Enrollment = {
  _id: string;
  _type: "enrollment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userEnrolled?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  contentsCompleted?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
  dateCompleted?: string;
  percentComplete?: number;
};

export type Quiz = {
  _id: string;
  _type: "quiz";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  questions?: Array<{
    question?: string;
    options?: Array<string>;
    correctOptionIndex?: number;
    explanation?: string;
    _type: "question";
    _key: string;
  }>;
};

export type Lesson = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  content?: string;
};

export type Chapter = {
  _id: string;
  _type: "chapter";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  description?: string;
  contents?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
};

export type Course = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  difficulty?: "beginner" | "intermediate" | "advanced";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
};

export type Topic = {
  _id: string;
  _type: "topic";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  icon?: string;
  color?: Color;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "not_started" | "completed";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "beginner" | "intermediate" | "advanced";
  studyStreak?: number;
  streakStartDate?: number;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type Markdown = string;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Enrollment | Quiz | Lesson | Chapter | Course | Topic | User | Color | RgbaColor | HsvaColor | HslaColor | Markdown | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/data/courses.ts
// Variable: getCoursesQuery
// Query: *[_type == "course"]{    ...,    "slug": slug.current,    }
export type GetCoursesQueryResult = Array<{
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  description?: string;
  difficulty?: "advanced" | "beginner" | "intermediate";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
}>;
// Variable: getCourseQuery
// Query: *[_type == "course" && slug.current == $slug][0]{    ...,    "slug": slug.current,    }
export type GetCourseQueryResult = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  description?: string;
  difficulty?: "advanced" | "beginner" | "intermediate";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
} | null;
// Variable: getCourseByIdQuery
// Query: *[_type == "course" && _id == $id][0]
export type GetCourseByIdQueryResult = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  difficulty?: "advanced" | "beginner" | "intermediate";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
} | null;
// Variable: getCourseContentsQuery
// Query: *[_type == "course" && slug.current == $slug][0]{      _id,      _type,      _createdAt,      _updatedAt,      title,      slug,      description,      price,      level,      thumbnail,      trailer,      difficulty,      "chapters": chapters[]->{        _id,        _type,        _createdAt,        _updatedAt,        title,        slug,        description,        "contents": contents[]->{          _id,          _type,          _createdAt,          _updatedAt,          title,          slug,          _type == "lesson" => {            content          },          _type == "quiz" => {            description,            questions          }        }      },      "topics": topics[]->{        _id,        _type,        _createdAt,        _updatedAt,        title,        slug,        description,        icon,        color      }    }
export type GetCourseContentsQueryResult = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  price: null;
  level: null;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  trailer: string | null;
  difficulty: "advanced" | "beginner" | "intermediate" | null;
  chapters: Array<{
    _id: string;
    _type: "chapter";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
    contents: Array<{
      _id: string;
      _type: "lesson";
      _createdAt: string;
      _updatedAt: string;
      title: string | null;
      slug: Slug | null;
      content: string | null;
    } | {
      _id: string;
      _type: "quiz";
      _createdAt: string;
      _updatedAt: string;
      title: string | null;
      slug: Slug | null;
      description: string | null;
      questions: Array<{
        question?: string;
        options?: Array<string>;
        correctOptionIndex?: number;
        explanation?: string;
        _type: "question";
        _key: string;
      }> | null;
    }> | null;
  }> | null;
  topics: Array<{
    _id: string;
    _type: "topic";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
    icon: string | null;
    color: Color | null;
  }> | null;
} | null;
// Variable: countQuery
// Query: count(*[_type == "course" && _id == $id][0].chapters[]->contents[])
export type CountQueryResult = number | null;
// Variable: getLessonBySlugQuery
// Query: *[_type == "lesson" && slug.current == $slug][0]
export type GetLessonBySlugQueryResult = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  content?: string;
} | null;
// Variable: getChapterBySlugQuery
// Query: *[_type == "chapter" && slug.current == $slug][0]{    ...,      "contents": contents[]->{          _id,          _type,          _createdAt,          _updatedAt,          title,          slug,        }    }
export type GetChapterBySlugQueryResult = {
  _id: string;
  _type: "chapter";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  description?: string;
  contents: Array<{
    _id: string;
    _type: "lesson";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
  } | {
    _id: string;
    _type: "quiz";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
} | null;

// Source: ./app/data/enrollments.ts
// Variable: getEnrollmentQuery
// Query: *[_type == "enrollment" &&      userEnrolled[0]._ref == $userId &&      course[0]._ref == $courseId][0]{      _id,      _type,      _rev,      _createdAt,      _updatedAt,      "userEnrolled": userEnrolled[0]->,      "course": course[0]->,      "contentsCompleted": contentsCompleted[]->{        _id,        _type,        _createdAt,        _updatedAt,        title,        slug,      },      dateCompleted,      percentComplete    }
export type GetEnrollmentQueryResult = {
  _id: string;
  _type: "enrollment";
  _rev: string;
  _createdAt: string;
  _updatedAt: string;
  userEnrolled: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    username?: string;
    firstname?: string;
    lastname?: string;
    email?: string;
    clerkId?: string;
    onboardingStatus?: "completed" | "not_started";
    learningGoals?: Array<string>;
    studyReason?: string;
    studyPlan?: string;
    level?: "advanced" | "beginner" | "intermediate";
    studyStreak?: number;
    streakStartDate?: number;
  } | null;
  course: {
    _id: string;
    _type: "course";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    difficulty?: "advanced" | "beginner" | "intermediate";
    thumbnail?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    trailer?: string;
    topics?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "topic";
    }>;
    chapters?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "chapter";
    }>;
  } | null;
  contentsCompleted: Array<{
    _id: string;
    _type: "lesson";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
  } | {
    _id: string;
    _type: "quiz";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  dateCompleted: string | null;
  percentComplete: number | null;
} | null;

// Source: ./app/data/users.ts
// Variable: findByEmailQuery
// Query: *[_type == "user" && email == $email][0]
export type FindByEmailQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "completed" | "not_started";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "advanced" | "beginner" | "intermediate";
  studyStreak?: number;
  streakStartDate?: number;
} | null;
// Variable: findByClerkIdQuery
// Query: *[_type == "user" && clerkId == $clerkId][0]
export type FindByClerkIdQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "completed" | "not_started";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "advanced" | "beginner" | "intermediate";
  studyStreak?: number;
  streakStartDate?: number;
} | null;
// Variable: findByUsernameQuery
// Query: *[_type == "user" && username == $username][0]
export type FindByUsernameQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "completed" | "not_started";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "advanced" | "beginner" | "intermediate";
  studyStreak?: number;
  streakStartDate?: number;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"course\"]{\n    ...,\n    \"slug\": slug.current,\n    }": GetCoursesQueryResult;
    "*[_type == \"course\" && slug.current == $slug][0]{\n    ...,\n    \"slug\": slug.current,\n    }": GetCourseQueryResult;
    "*[_type == \"course\" && _id == $id][0]": GetCourseByIdQueryResult;
    "\n    *[_type == \"course\" && slug.current == $slug][0]{\n      _id,\n      _type,\n      _createdAt,\n      _updatedAt,\n      title,\n      slug,\n      description,\n      price,\n      level,\n      thumbnail,\n      trailer,\n      difficulty,\n      \"chapters\": chapters[]->{\n        _id,\n        _type,\n        _createdAt,\n        _updatedAt,\n        title,\n        slug,\n        description,\n        \"contents\": contents[]->{\n          _id,\n          _type,\n          _createdAt,\n          _updatedAt,\n          title,\n          slug,\n          _type == \"lesson\" => {\n            content\n          },\n          _type == \"quiz\" => {\n            description,\n            questions\n          }\n        }\n      },\n      \"topics\": topics[]->{\n        _id,\n        _type,\n        _createdAt,\n        _updatedAt,\n        title,\n        slug,\n        description,\n        icon,\n        color\n      }\n    }\n  ": GetCourseContentsQueryResult;
    "\n    count(*[_type == \"course\" && _id == $id][0].chapters[]->contents[])\n  ": CountQueryResult;
    "*[_type == \"lesson\" && slug.current == $slug][0]": GetLessonBySlugQueryResult;
    "*[_type == \"chapter\" && slug.current == $slug][0]{\n    ...,\n      \"contents\": contents[]->{\n          _id,\n          _type,\n          _createdAt,\n          _updatedAt,\n          title,\n          slug,\n        }\n    }": GetChapterBySlugQueryResult;
    "\n    *[_type == \"enrollment\" &&\n      userEnrolled[0]._ref == $userId &&\n      course[0]._ref == $courseId][0]{\n      _id,\n      _type,\n      _rev,\n      _createdAt,\n      _updatedAt,\n      \"userEnrolled\": userEnrolled[0]->,\n      \"course\": course[0]->,\n      \"contentsCompleted\": contentsCompleted[]->{\n        _id,\n        _type,\n        _createdAt,\n        _updatedAt,\n        title,\n        slug,\n      },\n      dateCompleted,\n      percentComplete\n    }\n  ": GetEnrollmentQueryResult;
    "\n    *[_type == \"user\" && email == $email][0]\n  ": FindByEmailQueryResult;
    "\n    *[_type == \"user\" && clerkId == $clerkId][0]\n  ": FindByClerkIdQueryResult;
    "\n    *[_type == \"user\" && username == $username][0]\n  ": FindByUsernameQueryResult;
  }
}
