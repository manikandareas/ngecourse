/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Code>;

export type EmailNotification = {
  _id: string;
  _type: "emailNotification";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  type?: "welcome" | "achievement" | "courseCompletion" | "weeklyDigest";
  subject?: string;
  content?: string;
  sentAt?: string;
  deliveryStatus?: "sent" | "delivered" | "opened" | "failed";
  resendId?: string;
  metadata?: {
    data?: string;
  };
};

export type ChatMessage = {
  _id: string;
  _type: "chatMessage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  messageId?: string;
  session?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "chatSession";
  };
  role?: "system" | "user" | "assistant";
  metadata?: {
    custom?: string;
  };
  parts?: Array<{
    type?: string;
    text?: string;
    state?: "streaming" | "done";
    _type: "textUIPart";
    _key: string;
  } | {
    type?: string;
    text?: string;
    state?: "streaming" | "done";
    providerMetadata?: {
      data?: string;
    };
    _type: "reasoningUIPart";
    _key: string;
  } | {
    type?: string;
    name?: string;
    toolCallId?: string;
    state?: "input-streaming" | "input-available" | "output-available" | "output-error";
    input?: {
      data?: string;
    };
    output?: {
      data?: string;
    };
    errorText?: string;
    providerExecuted?: boolean;
    _type: "toolUIPart";
    _key: string;
  } | {
    type?: string;
    sourceId?: string;
    url?: string;
    title?: string;
    providerMetadata?: {
      data?: string;
    };
    _type: "sourceUrlUIPart";
    _key: string;
  } | {
    type?: string;
    sourceId?: string;
    mediaType?: string;
    title?: string;
    filename?: string;
    providerMetadata?: {
      data?: string;
    };
    _type: "sourceDocumentUIPart";
    _key: string;
  } | {
    type?: string;
    mediaType?: string;
    filename?: string;
    url?: string;
    _type: "fileUIPart";
    _key: string;
  } | {
    type?: string;
    name?: string;
    dataId?: string;
    data?: {
      content?: string;
    };
    _type: "dataUIPart";
    _key: string;
  } | {
    type?: string;
    _type: "stepStartUIPart";
    _key: string;
  }>;
};

export type ChatSession = {
  _id: string;
  _type: "chatSession";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  users?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  lessons?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "lesson";
  }>;
  sessionId?: string;
  createdAt?: string;
  lastActivity?: string;
  status?: "active" | "inactive" | "ended";
  metadata?: {
    userLevel?: string;
    lessonTitle?: string;
    totalMessages?: number;
  };
};

export type UserAchievement = {
  _id: string;
  _type: "userAchievement";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  achievement?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "achievement";
  };
  earned?: boolean;
  earnedAt?: string;
  progress?: number;
  notified?: boolean;
};

export type Achievement = {
  _id: string;
  _type: "achievement";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  title?: string;
  description?: string;
  icon?: string;
  category?: "first_steps" | "streak" | "quiz" | "course" | "social";
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  criteria?: {
    type?: "lesson_count" | "quiz_score" | "course_completion" | "streak_days" | "custom";
    target?: number;
    threshold?: number;
  };
  points?: number;
  isActive?: boolean;
};

export type LearningSession = {
  _id: string;
  _type: "learningSession";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  startTime?: string;
  endTime?: string;
  durationMinutes?: number;
  activitiesCompleted?: Array<{
    type?: "lesson" | "quiz" | "reading";
    contentId?: string;
    timeSpent?: number;
    _key: string;
  }>;
};

export type Recommendation = {
  _id: string;
  _type: "recommendation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  query?: string;
  reason?: string;
  createdFor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  courses?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  status?: "in_progress" | "completed" | "failed";
  message?: string;
};

export type Enrollment = {
  _id: string;
  _type: "enrollment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userEnrolled?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  contentsCompleted?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
  dateCompleted?: string;
  percentComplete?: number;
};

export type QuizAttempt = {
  _id: string;
  _type: "quizAttempt";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
  quiz?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  attemptNumber?: number;
  status?: "in_progress" | "submitted" | "graded";
  answers?: Array<{
    questionIndex?: number;
    selectedOptionIndex?: number;
    isOutcome?: "correct" | "incorrect";
    timeTakenMs?: number;
    _type: "answer";
    _key: string;
  }>;
  correctCount?: number;
  totalQuestions?: number;
  score?: number;
  percentage?: number;
  startedAt?: string;
  submittedAt?: string;
  durationMs?: number;
  feedback?: string;
  metadata?: {
    custom?: string;
  };
};

export type Quiz = {
  _id: string;
  _type: "quiz";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  maxAttempt?: number;
  questions?: Array<{
    question?: string;
    options?: Array<string>;
    correctOptionIndex?: number;
    explanation?: string;
    _type: "question";
    _key: string;
  }>;
};

export type Lesson = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  content?: BlockContent;
  videoUrl?: string;
};

export type Chapter = {
  _id: string;
  _type: "chapter";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  description?: string;
  contents?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }>;
};

export type Course = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  difficulty?: "beginner" | "intermediate" | "advanced";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  learningOutcomes?: Array<string>;
  resources?: Array<{
    label?: string;
    url?: string;
    _type: "resource";
    _key: string;
  }>;
  resourcesDigest?: string;
};

export type Topic = {
  _id: string;
  _type: "topic";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  icon?: string;
  color?: Color;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "not_started" | "completed";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "beginner" | "intermediate" | "advanced";
  studyStreak?: number;
  streakStartDate?: number;
  explanationStyle?: string;
  languagePreference?: "id" | "en" | "mix";
  goal?: string;
  analytics?: {
    totalXP?: number;
    currentLevel?: number;
    totalStudyTimeMinutes?: number;
    averageSessionTime?: number;
    strongestSkills?: Array<string>;
    improvementAreas?: Array<string>;
  };
  emailPreferences?: {
    welcomeEmail?: boolean;
    achievementEmails?: boolean;
    courseCompletionEmails?: boolean;
    weeklyDigest?: boolean;
    unsubscribedAt?: string;
  };
  lastEmailSent?: string;
  emailStats?: {
    totalSent?: number;
    totalOpened?: number;
    lastOpenedAt?: string;
  };
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = BlockContent | EmailNotification | ChatMessage | ChatSession | UserAchievement | Achievement | LearningSession | Recommendation | Enrollment | QuizAttempt | Quiz | Lesson | Chapter | Course | Topic | User | Color | RgbaColor | HsvaColor | HslaColor | Code | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/features/achievements/data/index.ts
// Variable: getUserAchievementsQuery
// Query: *[_type == "userAchievement" && user._ref == $userId]{    _id,    earned,    earnedAt,    progress,    notified,    achievement->{      _id,      id,      title,      description,      icon,      category,      criteria,      points,      isActive,      course->    }  } | order(achievement->category, earned desc, achievement->points desc)
export type GetUserAchievementsQueryResult = Array<{
  _id: string;
  earned: boolean | null;
  earnedAt: string | null;
  progress: number | null;
  notified: boolean | null;
  achievement: {
    _id: string;
    id: string | null;
    title: string | null;
    description: string | null;
    icon: string | null;
    category: "course" | "first_steps" | "quiz" | "social" | "streak" | null;
    criteria: {
      type?: "course_completion" | "custom" | "lesson_count" | "quiz_score" | "streak_days";
      target?: number;
      threshold?: number;
    } | null;
    points: number | null;
    isActive: boolean | null;
    course: {
      _id: string;
      _type: "course";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      description?: string;
      difficulty?: "advanced" | "beginner" | "intermediate";
      thumbnail?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      trailer?: string;
      topics?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "topic";
      }>;
      chapters?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "chapter";
      }>;
      learningOutcomes?: Array<string>;
      resources?: Array<{
        label?: string;
        url?: string;
        _type: "resource";
        _key: string;
      }>;
      resourcesDigest?: string;
    } | null;
  } | null;
}>;
// Variable: getAvailableAchievementsQuery
// Query: *[_type == "achievement" && isActive == true] | order(category, points asc){    _id,    id,    title,    description,    icon,    category,    criteria,    points,    isActive,    course->  }
export type GetAvailableAchievementsQueryResult = Array<{
  _id: string;
  id: string | null;
  title: string | null;
  description: string | null;
  icon: string | null;
  category: "course" | "first_steps" | "quiz" | "social" | "streak" | null;
  criteria: {
    type?: "course_completion" | "custom" | "lesson_count" | "quiz_score" | "streak_days";
    target?: number;
    threshold?: number;
  } | null;
  points: number | null;
  isActive: boolean | null;
  course: {
    _id: string;
    _type: "course";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    difficulty?: "advanced" | "beginner" | "intermediate";
    thumbnail?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    trailer?: string;
    topics?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "topic";
    }>;
    chapters?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "chapter";
    }>;
    learningOutcomes?: Array<string>;
    resources?: Array<{
      label?: string;
      url?: string;
      _type: "resource";
      _key: string;
    }>;
    resourcesDigest?: string;
  } | null;
}>;
// Variable: getAchievementByIdQuery
// Query: *[_type == "achievement" && id == $achievementId][0]{    _id,    id,    title,    description,    icon,    category,    criteria,    points,    isActive,    course->  }
export type GetAchievementByIdQueryResult = {
  _id: string;
  id: string | null;
  title: string | null;
  description: string | null;
  icon: string | null;
  category: "course" | "first_steps" | "quiz" | "social" | "streak" | null;
  criteria: {
    type?: "course_completion" | "custom" | "lesson_count" | "quiz_score" | "streak_days";
    target?: number;
    threshold?: number;
  } | null;
  points: number | null;
  isActive: boolean | null;
  course: {
    _id: string;
    _type: "course";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    difficulty?: "advanced" | "beginner" | "intermediate";
    thumbnail?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    trailer?: string;
    topics?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "topic";
    }>;
    chapters?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "chapter";
    }>;
    learningOutcomes?: Array<string>;
    resources?: Array<{
      label?: string;
      url?: string;
      _type: "resource";
      _key: string;
    }>;
    resourcesDigest?: string;
  } | null;
} | null;
// Variable: getUserAchievementRecordQuery
// Query: *[_type == "userAchievement" && user._ref == $userId && achievement._ref == $achievementId][0]
export type GetUserAchievementRecordQueryResult = {
  _id: string;
  _type: "userAchievement";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  achievement?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "achievement";
  };
  earned?: boolean;
  earnedAt?: string;
  progress?: number;
  notified?: boolean;
} | null;
// Variable: getUserProgressForAchievementsQuery
// Query: {    "user": *[_type == "user" && _id == $userId][0]{      _id,      studyStreak,      streakStartDate    },    "enrollments": *[_type == "enrollment" && userEnrolled[0]._ref == $userId]{      _id,      percentComplete,      dateCompleted,      "totalContent": count(course[0]->chapters[]->contents[]),      "completedContent": count(contentsCompleted),      "course": course[0]->{        _id,        title,        "slug": slug.current      }    },    "completedCourses": count(*[_type == "enrollment" && userEnrolled[0]._ref == $userId && percentComplete == 100 && defined(dateCompleted)]),    "completedCoursesList": *[_type == "enrollment" && userEnrolled[0]._ref == $userId && percentComplete == 100 && defined(dateCompleted)]{      _id,      dateCompleted,      "course": course[0]->{        _id,        title,        "slug": slug.current      }    },    "quizAttempts": *[_type == "quizAttempt" && user[0]._ref == $userId && status == "graded"]{      percentage,      submittedAt    },    "highScoringQuizzes": count(*[_type == "quizAttempt" && user[0]._ref == $userId && status == "graded" && percentage >= 90])  }
export type GetUserProgressForAchievementsQueryResult = {
  user: {
    _id: string;
    studyStreak: number | null;
    streakStartDate: number | null;
  } | null;
  enrollments: Array<{
    _id: string;
    percentComplete: number | null;
    dateCompleted: string | null;
    totalContent: number | null;
    completedContent: number | null;
    course: {
      _id: string;
      title: string | null;
      slug: string | null;
    } | null;
  }>;
  completedCourses: number;
  completedCoursesList: Array<{
    _id: string;
    dateCompleted: string | null;
    course: {
      _id: string;
      title: string | null;
      slug: string | null;
    } | null;
  }>;
  quizAttempts: Array<{
    percentage: number | null;
    submittedAt: string | null;
  }>;
  highScoringQuizzes: number;
};

// Source: ./app/features/ai-chat/data/index.ts
// Variable: chatHistoryQuery
// Query: *[_type == "chatMessage" &&    session._ref in *[_type == "chatSession" &&      $userId in users[]._ref &&      $lessonId in lessons[]._ref &&      status == "active"]._id  ] | order(_createdAt asc) {    _id,    messageId,    role,    parts,    metadata,    session->{      _id,      sessionId,      status    }  }
export type ChatHistoryQueryResult = Array<{
  _id: string;
  messageId: string | null;
  role: "assistant" | "system" | "user" | null;
  parts: Array<{
    type?: string;
    name?: string;
    dataId?: string;
    data?: {
      content?: string;
    };
    _type: "dataUIPart";
    _key: string;
  } | {
    type?: string;
    mediaType?: string;
    filename?: string;
    url?: string;
    _type: "fileUIPart";
    _key: string;
  } | {
    type?: string;
    text?: string;
    state?: "done" | "streaming";
    providerMetadata?: {
      data?: string;
    };
    _type: "reasoningUIPart";
    _key: string;
  } | {
    type?: string;
    sourceId?: string;
    mediaType?: string;
    title?: string;
    filename?: string;
    providerMetadata?: {
      data?: string;
    };
    _type: "sourceDocumentUIPart";
    _key: string;
  } | {
    type?: string;
    sourceId?: string;
    url?: string;
    title?: string;
    providerMetadata?: {
      data?: string;
    };
    _type: "sourceUrlUIPart";
    _key: string;
  } | {
    type?: string;
    _type: "stepStartUIPart";
    _key: string;
  } | {
    type?: string;
    text?: string;
    state?: "done" | "streaming";
    _type: "textUIPart";
    _key: string;
  } | {
    type?: string;
    name?: string;
    toolCallId?: string;
    state?: "input-available" | "input-streaming" | "output-available" | "output-error";
    input?: {
      data?: string;
    };
    output?: {
      data?: string;
    };
    errorText?: string;
    providerExecuted?: boolean;
    _type: "toolUIPart";
    _key: string;
  }> | null;
  metadata: {
    custom?: string;
  } | null;
  session: {
    _id: string;
    sessionId: string | null;
    status: "active" | "ended" | "inactive" | null;
  } | null;
}>;

// Source: ./app/features/courses/data/index.ts
// Variable: coursesQuery
// Query: *[_type == "course"]{    ...,    "slug": slug.current,    "topics": topics[]->    }
export type CoursesQueryResult = Array<{
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  description?: string;
  difficulty?: "advanced" | "beginner" | "intermediate";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics: Array<{
    _id: string;
    _type: "topic";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    icon?: string;
    color?: Color;
  }> | null;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  learningOutcomes?: Array<string>;
  resources?: Array<{
    label?: string;
    url?: string;
    _type: "resource";
    _key: string;
  }>;
  resourcesDigest?: string;
}>;
// Variable: courseQuery
// Query: *[_type == "course" && slug.current == $slug][0]{    ...,    "slug": slug.current,    }
export type CourseQueryResult = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  description?: string;
  difficulty?: "advanced" | "beginner" | "intermediate";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  learningOutcomes?: Array<string>;
  resources?: Array<{
    label?: string;
    url?: string;
    _type: "resource";
    _key: string;
  }>;
  resourcesDigest?: string;
} | null;
// Variable: courseByIdQuery
// Query: *[_type == "course" && _id == $id][0]
export type CourseByIdQueryResult = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  difficulty?: "advanced" | "beginner" | "intermediate";
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  trailer?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "topic";
  }>;
  chapters?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  learningOutcomes?: Array<string>;
  resources?: Array<{
    label?: string;
    url?: string;
    _type: "resource";
    _key: string;
  }>;
  resourcesDigest?: string;
} | null;
// Variable: courseContentsQuery
// Query: *[_type == "course" && slug.current == $slug][0]{      _id,      _type,      _createdAt,      _updatedAt,      title,      slug,      description,      price,      level,      thumbnail,      trailer,      difficulty,      "chapters": chapters[]->{        _id,        _type,        _createdAt,        _updatedAt,        title,        slug,        description,        "contents": contents[]->{          _id,          _type,          _createdAt,          _updatedAt,          title,          slug,          _type == "lesson" => {            content          },          _type == "quiz" => {            description,            questions          }        }      },      "topics": topics[]->{        _id,        _type,        _createdAt,        _updatedAt,        title,        slug,        description,        icon,        color      }    }
export type CourseContentsQueryResult = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  price: null;
  level: null;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  trailer: string | null;
  difficulty: "advanced" | "beginner" | "intermediate" | null;
  chapters: Array<{
    _id: string;
    _type: "chapter";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
    contents: Array<{
      _id: string;
      _type: "lesson";
      _createdAt: string;
      _updatedAt: string;
      title: string | null;
      slug: Slug | null;
      content: BlockContent | null;
    } | {
      _id: string;
      _type: "quiz";
      _createdAt: string;
      _updatedAt: string;
      title: string | null;
      slug: Slug | null;
      description: string | null;
      questions: Array<{
        question?: string;
        options?: Array<string>;
        correctOptionIndex?: number;
        explanation?: string;
        _type: "question";
        _key: string;
      }> | null;
    }> | null;
  }> | null;
  topics: Array<{
    _id: string;
    _type: "topic";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
    icon: string | null;
    color: Color | null;
  }> | null;
} | null;
// Variable: countCourseContentsQuery
// Query: count(*[_type == "course" && _id == $id][0].chapters[]->contents[])
export type CountCourseContentsQueryResult = number | null;
// Variable: lessonQuery
// Query: *[_type == "lesson" && slug.current == $slug][0]{    ...,     content[]{    ...,    _type == "image" => {      ...,      asset->    }  }    }
export type LessonQueryResult = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  chapter?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "chapter";
  }>;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    _key: string;
    _type: "code";
    language?: string;
    filename?: string;
    code?: string;
    highlightedLines?: Array<number>;
  } | {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  videoUrl?: string;
} | null;
// Variable: chapterQuery
// Query: *[_type == "chapter" && slug.current == $slug][0]{    ...,      "contents": contents[]->{          _id,          _type,          _createdAt,          _updatedAt,          title,          slug,        }    }
export type ChapterQueryResult = {
  _id: string;
  _type: "chapter";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  course?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "course";
  }>;
  description?: string;
  contents: Array<{
    _id: string;
    _type: "lesson";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
  } | {
    _id: string;
    _type: "quiz";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
} | null;

// Source: ./app/features/enrollments/data/index.ts
// Variable: enrollmentQuery
// Query: *[_type == "enrollment" &&      userEnrolled[0]._ref == $userId &&      course[0]->.slug.current == $courseSlug][0]{      _id,      _type,      _rev,      _createdAt,      _updatedAt,      "userEnrolled": userEnrolled[0]->,      "course": course[0]->,      "contentsCompleted": contentsCompleted[]->{        _id,        _type,        _createdAt,        _updatedAt,        title,        slug,      },      dateCompleted,      percentComplete    }
export type EnrollmentQueryResult = {
  _id: string;
  _type: "enrollment";
  _rev: string;
  _createdAt: string;
  _updatedAt: string;
  userEnrolled: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    username?: string;
    firstname?: string;
    lastname?: string;
    email?: string;
    clerkId?: string;
    onboardingStatus?: "completed" | "not_started";
    learningGoals?: Array<string>;
    studyReason?: string;
    studyPlan?: string;
    level?: "advanced" | "beginner" | "intermediate";
    studyStreak?: number;
    streakStartDate?: number;
    explanationStyle?: string;
    languagePreference?: "en" | "id" | "mix";
    goal?: string;
    analytics?: {
      totalXP?: number;
      currentLevel?: number;
      totalStudyTimeMinutes?: number;
      averageSessionTime?: number;
      strongestSkills?: Array<string>;
      improvementAreas?: Array<string>;
    };
    emailPreferences?: {
      welcomeEmail?: boolean;
      achievementEmails?: boolean;
      courseCompletionEmails?: boolean;
      weeklyDigest?: boolean;
      unsubscribedAt?: string;
    };
    lastEmailSent?: string;
    emailStats?: {
      totalSent?: number;
      totalOpened?: number;
      lastOpenedAt?: string;
    };
  } | null;
  course: {
    _id: string;
    _type: "course";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    difficulty?: "advanced" | "beginner" | "intermediate";
    thumbnail?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    trailer?: string;
    topics?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "topic";
    }>;
    chapters?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "chapter";
    }>;
    learningOutcomes?: Array<string>;
    resources?: Array<{
      label?: string;
      url?: string;
      _type: "resource";
      _key: string;
    }>;
    resourcesDigest?: string;
  } | null;
  contentsCompleted: Array<{
    _id: string;
    _type: "lesson";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
  } | {
    _id: string;
    _type: "quiz";
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  dateCompleted: string | null;
  percentComplete: number | null;
} | null;

// Source: ./app/features/progress/data/index.ts
// Variable: getUserProgressDataQuery
// Query: *[_type == "user" && clerkId == $clerkId][0]{    _id,    username,    firstname,    lastname,    studyStreak,    streakStartDate,    learningGoals,    studyPlan,    level,    onboardingStatus,    analytics  }
export type GetUserProgressDataQueryResult = {
  _id: string;
  username: string | null;
  firstname: string | null;
  lastname: string | null;
  studyStreak: number | null;
  streakStartDate: number | null;
  learningGoals: Array<string> | null;
  studyPlan: string | null;
  level: "advanced" | "beginner" | "intermediate" | null;
  onboardingStatus: "completed" | "not_started" | null;
  analytics: {
    totalXP?: number;
    currentLevel?: number;
    totalStudyTimeMinutes?: number;
    averageSessionTime?: number;
    strongestSkills?: Array<string>;
    improvementAreas?: Array<string>;
  } | null;
} | null;
// Variable: getUserEnrollmentsQuery
// Query: *[_type == "enrollment" && userEnrolled[0]._ref == $userId]{    _id,    percentComplete,    dateCompleted,    contentsCompleted,    course[0]->{      _id,      title,      "slug": slug.current,      description,      difficulty,      thumbnail,      topics[]->{        _id,        title,        "slug": slug.current      }    }  }
export type GetUserEnrollmentsQueryResult = Array<{
  _id: string;
  percentComplete: number | null;
  dateCompleted: string | null;
  contentsCompleted: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }> | null;
  course: {
    _id: string;
    title: string | null;
    slug: string | null;
    description: string | null;
    difficulty: "advanced" | "beginner" | "intermediate" | null;
    thumbnail: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    topics: Array<{
      _id: string;
      title: string | null;
      slug: string | null;
    }> | null;
  } | null;
}>;
// Variable: getRecentQuizAttemptsQuery
// Query: *[_type == "quizAttempt" && user[0]._ref == $userId] | order(submittedAt desc)[0...5]{    _id,    score,    percentage,    totalQuestions,    correctCount,    submittedAt,    status,    quiz[0]->{      _id,      title,      "slug": slug.current    },    course[0]->{      _id,      title,      "slug": slug.current    },    chapter[0]->{      _id,      title    }  }
export type GetRecentQuizAttemptsQueryResult = Array<{
  _id: string;
  score: number | null;
  percentage: number | null;
  totalQuestions: number | null;
  correctCount: number | null;
  submittedAt: string | null;
  status: "graded" | "in_progress" | "submitted" | null;
  quiz: {
    _id: string;
    title: string | null;
    slug: string | null;
  } | null;
  course: {
    _id: string;
    title: string | null;
    slug: string | null;
  } | null;
  chapter: {
    _id: string;
    title: string | null;
  } | null;
}>;
// Variable: getRecentlyCompletedContentQuery
// Query: *[_type == "enrollment" && userEnrolled[0]._ref == $userId && count(contentsCompleted) > 0]{    _id,    "recentCompletions": contentsCompleted[-5..-1][]->{      _id,      _type,      title,      "slug": slug.current,      "parentChapter": *[_type == "chapter" && references(^._id)][0]{        _id,        title,        "slug": slug.current      },      "parentCourse": *[_type == "chapter" && references(^._id)][0].course[0]->{        _id,        title,        "slug": slug.current      }    },    course[0]->{      _id,      title,      "slug": slug.current    },    percentComplete,    dateCompleted  }
export type GetRecentlyCompletedContentQueryResult = Array<{
  _id: string;
  recentCompletions: Array<{
    _id: string;
    _type: "lesson";
    title: string | null;
    slug: string | null;
    parentChapter: {
      _id: string;
      title: string | null;
      slug: string | null;
    } | null;
    parentCourse: {
      _id: string;
      title: string | null;
      slug: string | null;
    } | null;
  } | {
    _id: string;
    _type: "quiz";
    title: string | null;
    slug: string | null;
    parentChapter: {
      _id: string;
      title: string | null;
      slug: string | null;
    } | null;
    parentCourse: {
      _id: string;
      title: string | null;
      slug: string | null;
    } | null;
  }> | null;
  course: {
    _id: string;
    title: string | null;
    slug: string | null;
  } | null;
  percentComplete: number | null;
  dateCompleted: string | null;
}>;
// Variable: getCourseProgressQuery
// Query: *[_type == "enrollment" && userEnrolled[0]._ref == $userId && course[0]._ref == $courseId][0]{    _id,    percentComplete,    contentsCompleted,    dateCompleted,    course[0]->{      _id,      title,      "slug": slug.current,      chapters[]->{        _id,        title,        "slug": slug.current,        contents[]->{          _id,          _type,          title,          "slug": slug.current        }      }    }  }
export type GetCourseProgressQueryResult = {
  _id: string;
  percentComplete: number | null;
  contentsCompleted: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quiz";
  }> | null;
  dateCompleted: string | null;
  course: {
    _id: string;
    title: string | null;
    slug: string | null;
    chapters: Array<{
      _id: string;
      title: string | null;
      slug: string | null;
      contents: Array<{
        _id: string;
        _type: "lesson";
        title: string | null;
        slug: string | null;
      } | {
        _id: string;
        _type: "quiz";
        title: string | null;
        slug: string | null;
      }> | null;
    }> | null;
  } | null;
} | null;
// Variable: getUserActivityStatsQuery
// Query: {    "totalEnrollments": count(*[_type == "enrollment" && userEnrolled[0]._ref == $userId]),    "completedCourses": count(*[_type == "enrollment" && userEnrolled[0]._ref == $userId && percentComplete == 100]),    "totalQuizAttempts": count(*[_type == "quizAttempt" && user[0]._ref == $userId]),    "averageQuizScore": math::avg(*[_type == "quizAttempt" && user[0]._ref == $userId && status == "graded"].percentage),    "totalContentCompleted": math::sum(*[_type == "enrollment" && userEnrolled[0]._ref == $userId]{ "c": count(contentsCompleted) }.c)  }
export type GetUserActivityStatsQueryResult = {
  totalEnrollments: number;
  completedCourses: number;
  totalQuizAttempts: number;
  averageQuizScore: number | null;
  totalContentCompleted: number;
};

// Source: ./app/features/quizzes/data/index.ts
// Variable: quizQuery
// Query: *[_type == "quiz" && slug.current == $slug][0]{      _id,      _type,      _createdAt,      _updatedAt,      title,      "slug": slug.current,      description,      maxAttempt,      questions[]{        _key,        question,        options,        correctOptionIndex,        explanation      }    }
export type QuizQueryResult = {
  _id: string;
  _type: "quiz";
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: string | null;
  description: string | null;
  maxAttempt: number | null;
  questions: Array<{
    _key: string;
    question: string | null;
    options: Array<string> | null;
    correctOptionIndex: number | null;
    explanation: string | null;
  }> | null;
} | null;
// Variable: attemptQuery
// Query: *[_type == "quizAttempt" && _id == $attemptId && user[0]._ref == $userId][0]{      _id,      _type,      _createdAt,      _updatedAt,      _rev,      attemptNumber,      status,      answers[]{        _key,        questionIndex,        selectedOptionIndex,        isOutcome,        timeTakenMs      },      correctCount,      totalQuestions,      score,      percentage,      startedAt,      submittedAt,      durationMs,      feedback,      "quiz": quiz[0]->{        _id,        title,        "slug": slug.current,        description,        questions[]{          _key,          question,          options,          correctOptionIndex,          explanation        }      },      "course": course[0]->{        _id,        title,        "slug": slug.current      },      "chapter": chapter[0]->{        _id,        title,        "slug": slug.current      }    }
export type AttemptQueryResult = {
  _id: string;
  _type: "quizAttempt";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  attemptNumber: number | null;
  status: "graded" | "in_progress" | "submitted" | null;
  answers: Array<{
    _key: string;
    questionIndex: number | null;
    selectedOptionIndex: number | null;
    isOutcome: "correct" | "incorrect" | null;
    timeTakenMs: number | null;
  }> | null;
  correctCount: number | null;
  totalQuestions: number | null;
  score: number | null;
  percentage: number | null;
  startedAt: string | null;
  submittedAt: string | null;
  durationMs: number | null;
  feedback: string | null;
  quiz: {
    _id: string;
    title: string | null;
    slug: string | null;
    description: string | null;
    questions: Array<{
      _key: string;
      question: string | null;
      options: Array<string> | null;
      correctOptionIndex: number | null;
      explanation: string | null;
    }> | null;
  } | null;
  course: {
    _id: string;
    title: string | null;
    slug: string | null;
  } | null;
  chapter: {
    _id: string;
    title: string | null;
    slug: string | null;
  } | null;
} | null;
// Variable: attemptsQuery
// Query: *[_type == "quizAttempt" &&       user[0]._ref == $userId &&       quiz[0]._ref == $quizId] | order(_createdAt desc){      _id,      attemptNumber,      status,      percentage,      correctCount,      totalQuestions,      _createdAt,      submittedAt    }
export type AttemptsQueryResult = Array<{
  _id: string;
  attemptNumber: number | null;
  status: "graded" | "in_progress" | "submitted" | null;
  percentage: number | null;
  correctCount: number | null;
  totalQuestions: number | null;
  _createdAt: string;
  submittedAt: string | null;
}>;

// Source: ./app/features/recommendation/data/index.tsx
// Variable: recommendationQuery
// Query: *[_type == "recommendation" && createdFor._ref == $userId][0]{    _id,    _type,    _createdAt,    _updatedAt,    query,    reason,    status,    message,    "courses": courses[]->{      _id,      title,      "slug": slug.current,      "topics": topics[]->,      description,      difficulty,      thumbnail,      trailer    }  }
export type RecommendationQueryResult = {
  _id: string;
  _type: "recommendation";
  _createdAt: string;
  _updatedAt: string;
  query: string | null;
  reason: string | null;
  status: "completed" | "failed" | "in_progress" | null;
  message: string | null;
  courses: Array<{
    _id: string;
    title: string | null;
    slug: string | null;
    topics: Array<{
      _id: string;
      _type: "topic";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      description?: string;
      icon?: string;
      color?: Color;
    }> | null;
    description: string | null;
    difficulty: "advanced" | "beginner" | "intermediate" | null;
    thumbnail: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    trailer: string | null;
  }> | null;
} | null;

// Source: ./app/features/users/data/index.ts
// Variable: findByEmailQuery
// Query: *[_type == "user" && email == $email][0]
export type FindByEmailQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "completed" | "not_started";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "advanced" | "beginner" | "intermediate";
  studyStreak?: number;
  streakStartDate?: number;
  explanationStyle?: string;
  languagePreference?: "en" | "id" | "mix";
  goal?: string;
  analytics?: {
    totalXP?: number;
    currentLevel?: number;
    totalStudyTimeMinutes?: number;
    averageSessionTime?: number;
    strongestSkills?: Array<string>;
    improvementAreas?: Array<string>;
  };
  emailPreferences?: {
    welcomeEmail?: boolean;
    achievementEmails?: boolean;
    courseCompletionEmails?: boolean;
    weeklyDigest?: boolean;
    unsubscribedAt?: string;
  };
  lastEmailSent?: string;
  emailStats?: {
    totalSent?: number;
    totalOpened?: number;
    lastOpenedAt?: string;
  };
} | null;
// Variable: findByClerkIdQuery
// Query: *[_type == "user" && clerkId == $clerkId][0]
export type FindByClerkIdQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "completed" | "not_started";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "advanced" | "beginner" | "intermediate";
  studyStreak?: number;
  streakStartDate?: number;
  explanationStyle?: string;
  languagePreference?: "en" | "id" | "mix";
  goal?: string;
  analytics?: {
    totalXP?: number;
    currentLevel?: number;
    totalStudyTimeMinutes?: number;
    averageSessionTime?: number;
    strongestSkills?: Array<string>;
    improvementAreas?: Array<string>;
  };
  emailPreferences?: {
    welcomeEmail?: boolean;
    achievementEmails?: boolean;
    courseCompletionEmails?: boolean;
    weeklyDigest?: boolean;
    unsubscribedAt?: string;
  };
  lastEmailSent?: string;
  emailStats?: {
    totalSent?: number;
    totalOpened?: number;
    lastOpenedAt?: string;
  };
} | null;
// Variable: findByUsernameQuery
// Query: *[_type == "user" && username == $username][0]
export type FindByUsernameQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  firstname?: string;
  lastname?: string;
  email?: string;
  clerkId?: string;
  onboardingStatus?: "completed" | "not_started";
  learningGoals?: Array<string>;
  studyReason?: string;
  studyPlan?: string;
  level?: "advanced" | "beginner" | "intermediate";
  studyStreak?: number;
  streakStartDate?: number;
  explanationStyle?: string;
  languagePreference?: "en" | "id" | "mix";
  goal?: string;
  analytics?: {
    totalXP?: number;
    currentLevel?: number;
    totalStudyTimeMinutes?: number;
    averageSessionTime?: number;
    strongestSkills?: Array<string>;
    improvementAreas?: Array<string>;
  };
  emailPreferences?: {
    welcomeEmail?: boolean;
    achievementEmails?: boolean;
    courseCompletionEmails?: boolean;
    weeklyDigest?: boolean;
    unsubscribedAt?: string;
  };
  lastEmailSent?: string;
  emailStats?: {
    totalSent?: number;
    totalOpened?: number;
    lastOpenedAt?: string;
  };
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"userAchievement\" && user._ref == $userId]{\n    _id,\n    earned,\n    earnedAt,\n    progress,\n    notified,\n    achievement->{\n      _id,\n      id,\n      title,\n      description,\n      icon,\n      category,\n      criteria,\n      points,\n      isActive,\n      course->\n    }\n  } | order(achievement->category, earned desc, achievement->points desc)\n": GetUserAchievementsQueryResult;
    "\n  *[_type == \"achievement\" && isActive == true] | order(category, points asc){\n    _id,\n    id,\n    title,\n    description,\n    icon,\n    category,\n    criteria,\n    points,\n    isActive,\n    course->\n  }\n": GetAvailableAchievementsQueryResult;
    "\n  *[_type == \"achievement\" && id == $achievementId][0]{\n    _id,\n    id,\n    title,\n    description,\n    icon,\n    category,\n    criteria,\n    points,\n    isActive,\n    course->\n  }\n": GetAchievementByIdQueryResult;
    "\n  *[_type == \"userAchievement\" && user._ref == $userId && achievement._ref == $achievementId][0]\n": GetUserAchievementRecordQueryResult;
    "\n  {\n    \"user\": *[_type == \"user\" && _id == $userId][0]{\n      _id,\n      studyStreak,\n      streakStartDate\n    },\n    \"enrollments\": *[_type == \"enrollment\" && userEnrolled[0]._ref == $userId]{\n      _id,\n      percentComplete,\n      dateCompleted,\n      \"totalContent\": count(course[0]->chapters[]->contents[]),\n      \"completedContent\": count(contentsCompleted),\n      \"course\": course[0]->{\n        _id,\n        title,\n        \"slug\": slug.current\n      }\n    },\n    \"completedCourses\": count(*[_type == \"enrollment\" && userEnrolled[0]._ref == $userId && percentComplete == 100 && defined(dateCompleted)]),\n    \"completedCoursesList\": *[_type == \"enrollment\" && userEnrolled[0]._ref == $userId && percentComplete == 100 && defined(dateCompleted)]{\n      _id,\n      dateCompleted,\n      \"course\": course[0]->{\n        _id,\n        title,\n        \"slug\": slug.current\n      }\n    },\n    \"quizAttempts\": *[_type == \"quizAttempt\" && user[0]._ref == $userId && status == \"graded\"]{\n      percentage,\n      submittedAt\n    },\n    \"highScoringQuizzes\": count(*[_type == \"quizAttempt\" && user[0]._ref == $userId && status == \"graded\" && percentage >= 90])\n  }\n": GetUserProgressForAchievementsQueryResult;
    "*[_type == \"chatMessage\" &&\n    session._ref in *[_type == \"chatSession\" &&\n      $userId in users[]._ref &&\n      $lessonId in lessons[]._ref &&\n      status == \"active\"]._id\n  ] | order(_createdAt asc) {\n    _id,\n    messageId,\n    role,\n    parts,\n    metadata,\n    session->{\n      _id,\n      sessionId,\n      status\n    }\n  }": ChatHistoryQueryResult;
    "*[_type == \"course\"]{\n    ...,\n    \"slug\": slug.current,\n    \"topics\": topics[]->\n    }": CoursesQueryResult;
    "*[_type == \"course\" && slug.current == $slug][0]{\n    ...,\n    \"slug\": slug.current,\n    }": CourseQueryResult;
    "*[_type == \"course\" && _id == $id][0]": CourseByIdQueryResult;
    "\n    *[_type == \"course\" && slug.current == $slug][0]{\n      _id,\n      _type,\n      _createdAt,\n      _updatedAt,\n      title,\n      slug,\n      description,\n      price,\n      level,\n      thumbnail,\n      trailer,\n      difficulty,\n      \"chapters\": chapters[]->{\n        _id,\n        _type,\n        _createdAt,\n        _updatedAt,\n        title,\n        slug,\n        description,\n        \"contents\": contents[]->{\n          _id,\n          _type,\n          _createdAt,\n          _updatedAt,\n          title,\n          slug,\n          _type == \"lesson\" => {\n            content\n          },\n          _type == \"quiz\" => {\n            description,\n            questions\n          }\n        }\n      },\n      \"topics\": topics[]->{\n        _id,\n        _type,\n        _createdAt,\n        _updatedAt,\n        title,\n        slug,\n        description,\n        icon,\n        color\n      }\n    }\n  ": CourseContentsQueryResult;
    "\n    count(*[_type == \"course\" && _id == $id][0].chapters[]->contents[])\n  ": CountCourseContentsQueryResult;
    "*[_type == \"lesson\" && slug.current == $slug][0]{\n    ...,\n     content[]{\n    ...,\n    _type == \"image\" => {\n      ...,\n      asset->\n    }\n  }\n    }": LessonQueryResult;
    "*[_type == \"chapter\" && slug.current == $slug][0]{\n    ...,\n      \"contents\": contents[]->{\n          _id,\n          _type,\n          _createdAt,\n          _updatedAt,\n          title,\n          slug,\n        }\n    }": ChapterQueryResult;
    "\n    *[_type == \"enrollment\" &&\n      userEnrolled[0]._ref == $userId &&\n      course[0]->.slug.current == $courseSlug][0]{\n      _id,\n      _type,\n      _rev,\n      _createdAt,\n      _updatedAt,\n      \"userEnrolled\": userEnrolled[0]->,\n      \"course\": course[0]->,\n      \"contentsCompleted\": contentsCompleted[]->{\n        _id,\n        _type,\n        _createdAt,\n        _updatedAt,\n        title,\n        slug,\n      },\n      dateCompleted,\n      percentComplete\n    }\n  ": EnrollmentQueryResult;
    "\n  *[_type == \"user\" && clerkId == $clerkId][0]{\n    _id,\n    username,\n    firstname,\n    lastname,\n    studyStreak,\n    streakStartDate,\n    learningGoals,\n    studyPlan,\n    level,\n    onboardingStatus,\n    analytics\n  }\n": GetUserProgressDataQueryResult;
    "\n  *[_type == \"enrollment\" && userEnrolled[0]._ref == $userId]{\n    _id,\n    percentComplete,\n    dateCompleted,\n    contentsCompleted,\n    course[0]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      description,\n      difficulty,\n      thumbnail,\n      topics[]->{\n        _id,\n        title,\n        \"slug\": slug.current\n      }\n    }\n  }\n": GetUserEnrollmentsQueryResult;
    "\n  *[_type == \"quizAttempt\" && user[0]._ref == $userId] | order(submittedAt desc)[0...5]{\n    _id,\n    score,\n    percentage,\n    totalQuestions,\n    correctCount,\n    submittedAt,\n    status,\n    quiz[0]->{\n      _id,\n      title,\n      \"slug\": slug.current\n    },\n    course[0]->{\n      _id,\n      title,\n      \"slug\": slug.current\n    },\n    chapter[0]->{\n      _id,\n      title\n    }\n  }\n": GetRecentQuizAttemptsQueryResult;
    "\n  *[_type == \"enrollment\" && userEnrolled[0]._ref == $userId && count(contentsCompleted) > 0]{\n    _id,\n    \"recentCompletions\": contentsCompleted[-5..-1][]->{\n      _id,\n      _type,\n      title,\n      \"slug\": slug.current,\n      \"parentChapter\": *[_type == \"chapter\" && references(^._id)][0]{\n        _id,\n        title,\n        \"slug\": slug.current\n      },\n      \"parentCourse\": *[_type == \"chapter\" && references(^._id)][0].course[0]->{\n        _id,\n        title,\n        \"slug\": slug.current\n      }\n    },\n    course[0]->{\n      _id,\n      title,\n      \"slug\": slug.current\n    },\n    percentComplete,\n    dateCompleted\n  }\n": GetRecentlyCompletedContentQueryResult;
    "\n  *[_type == \"enrollment\" && userEnrolled[0]._ref == $userId && course[0]._ref == $courseId][0]{\n    _id,\n    percentComplete,\n    contentsCompleted,\n    dateCompleted,\n    course[0]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      chapters[]->{\n        _id,\n        title,\n        \"slug\": slug.current,\n        contents[]->{\n          _id,\n          _type,\n          title,\n          \"slug\": slug.current\n        }\n      }\n    }\n  }\n": GetCourseProgressQueryResult;
    "\n  {\n    \"totalEnrollments\": count(*[_type == \"enrollment\" && userEnrolled[0]._ref == $userId]),\n    \"completedCourses\": count(*[_type == \"enrollment\" && userEnrolled[0]._ref == $userId && percentComplete == 100]),\n    \"totalQuizAttempts\": count(*[_type == \"quizAttempt\" && user[0]._ref == $userId]),\n    \"averageQuizScore\": math::avg(*[_type == \"quizAttempt\" && user[0]._ref == $userId && status == \"graded\"].percentage),\n    \"totalContentCompleted\": math::sum(*[_type == \"enrollment\" && userEnrolled[0]._ref == $userId]{ \"c\": count(contentsCompleted) }.c)\n  }\n": GetUserActivityStatsQueryResult;
    "\n    *[_type == \"quiz\" && slug.current == $slug][0]{\n      _id,\n      _type,\n      _createdAt,\n      _updatedAt,\n      title,\n      \"slug\": slug.current,\n      description,\n      maxAttempt,\n      questions[]{\n        _key,\n        question,\n        options,\n        correctOptionIndex,\n        explanation\n      }\n    }\n  ": QuizQueryResult;
    "\n    *[_type == \"quizAttempt\" && _id == $attemptId && user[0]._ref == $userId][0]{\n      _id,\n      _type,\n      _createdAt,\n      _updatedAt,\n      _rev,\n      attemptNumber,\n      status,\n      answers[]{\n        _key,\n        questionIndex,\n        selectedOptionIndex,\n        isOutcome,\n        timeTakenMs\n      },\n      correctCount,\n      totalQuestions,\n      score,\n      percentage,\n      startedAt,\n      submittedAt,\n      durationMs,\n      feedback,\n      \"quiz\": quiz[0]->{\n        _id,\n        title,\n        \"slug\": slug.current,\n        description,\n        questions[]{\n          _key,\n          question,\n          options,\n          correctOptionIndex,\n          explanation\n        }\n      },\n      \"course\": course[0]->{\n        _id,\n        title,\n        \"slug\": slug.current\n      },\n      \"chapter\": chapter[0]->{\n        _id,\n        title,\n        \"slug\": slug.current\n      }\n    }\n  ": AttemptQueryResult;
    "\n    *[_type == \"quizAttempt\" && \n      user[0]._ref == $userId && \n      quiz[0]._ref == $quizId] | order(_createdAt desc){\n      _id,\n      attemptNumber,\n      status,\n      percentage,\n      correctCount,\n      totalQuestions,\n      _createdAt,\n      submittedAt\n    }\n  ": AttemptsQueryResult;
    "\n  *[_type == \"recommendation\" && createdFor._ref == $userId][0]{\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    query,\n    reason,\n    status,\n    message,\n    \"courses\": courses[]->{\n      _id,\n      title,\n      \"slug\": slug.current,\n      \"topics\": topics[]->,\n      description,\n      difficulty,\n      thumbnail,\n      trailer\n    }\n  }\n": RecommendationQueryResult;
    "\n    *[_type == \"user\" && email == $email][0]\n  ": FindByEmailQueryResult;
    "\n    *[_type == \"user\" && clerkId == $clerkId][0]\n  ": FindByClerkIdQueryResult;
    "\n    *[_type == \"user\" && username == $username][0]\n  ": FindByUsernameQueryResult;
  }
}
